/// Actors library

module actors;

import actors.Actors;

/// Basically, the actors library is made of only a few public types and functions:
typedef t_message = 'a;
typedef t_actor_id = number;
typedef t_receive = t_message -> ();
typedef t_init = () -> ();
typedef t_actor = {receive is t_receive};
typedef t_bootstrap_actor = {receive is t_receive, init is t_init};

// Default init function does nothing
nop () = ();

//TODO extend API to provide a supervisor function?

/// Attach an actor to the current thread (needed to bootstrap the whole actors system)
/// This is the only function that can be called outside any actor.
/// It must be called exactly once.
/// This function is blocking and never returns!
bootstrap actor is t_bootstrap_actor -> () = 
	Actors#bootstrap(actor.init, actor.receive);

shutdown () =
	Actors#shutdown();
	
/// Create a new actor with its own thread
newActor actor is t_actor -> t_actor_id =
	(actor = {init = nop} with actor;
	 Actors#newActor(actor.init, actor.receive));

/// Attach an actor to the EDT thread
newEdtActor receive is t_receive -> t_actor_id = 
	Actors#newEdtActor(receive);

reply message is t_message -> () = 
	Actors#reply(message);

/// Send a message to an actor asynchroneously
(!) actor message is t_actor_id -> t_message -> () = 
	Actors#send(actor, message);

/// Return the id of the current actor calling this method
self () is () -> t_actor_id = 
	Actors#self();

/// Return the id of the actor that sent the currently processed message
source () is () -> t_actor_id = 
	Actors#source();

changeReceiver receive is t_receive -> () = 
	Actors#changeReceiver(receive);

// Only the following API is exported
{
	bootstrap,
	shutdown,
	newActor,
//	newEdtActor,
	(!),
	self,
	reply,
	source,
	changeReceiver
}
